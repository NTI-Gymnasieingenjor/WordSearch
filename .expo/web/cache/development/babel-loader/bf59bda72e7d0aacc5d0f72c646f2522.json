{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GameBoard;\nexports.GameTile = GameTile;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _gameBoardStyle = _interopRequireDefault(require(\"./gameBoardStyle\"));\n\nvar _Word = _interopRequireDefault(require(\"../word/Word\"));\n\nvar _jsxFileName = \"/home/erikreider/GitHub/WordSearch/js/gameBoard/GameBoard.js\";\nvar letters = [[new _Word.default('H', 69), new _Word.default('e', 69), new _Word.default('j', 69)], [new _Word.default('c', 420), new _Word.default('a', 420), new _Word.default('t', 420)], [new _Word.default('t', 96), new _Word.default('j', 96), new _Word.default('a', 96)]];\n\nfunction GameBoard() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      selectedList = _React$useState2[0],\n      setSelectedList = _React$useState2[1];\n\n  console.log(\"helllo\");\n\n  function renderRow(letterGroup, selectedList, setSelectedList) {\n    return React.createElement(_reactNative.View, {\n      style: _gameBoardStyle.default.row,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, React.createElement(GameTile, {\n      letters: letterGroup[0],\n      selectedList: selectedList,\n      setSelectedList: setSelectedList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }), React.createElement(GameTile, {\n      letters: letterGroup[1],\n      selectedList: selectedList,\n      setSelectedList: setSelectedList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), React.createElement(GameTile, {\n      letters: letterGroup[2],\n      selectedList: selectedList,\n      setSelectedList: setSelectedList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: _gameBoardStyle.default.board,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, letters.map(function (letterGroup) {\n    return renderRow(letterGroup, selectedList, setSelectedList);\n  }));\n}\n\nfunction GameTile(props) {\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      selected = _React$useState4[0],\n      setSelected = _React$useState4[1];\n\n  return React.createElement(_reactNative.View, {\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      setSelected(!selected);\n      props.setSelectedList([].concat((0, _toConsumableArray2.default)(props.selectedList), [props.letters.word]));\n    },\n    style: [_gameBoardStyle.default.tile, {\n      backgroundColor: !selected ? 'white' : 'lightblue'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(_reactNative.Text, {\n    style: _gameBoardStyle.default.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, props.letters === undefined ? '' : props.letters.word.toUpperCase()));\n}","map":{"version":3,"sources":["/home/erikreider/GitHub/WordSearch/js/gameBoard/GameBoard.js"],"names":["letters","Word","GameBoard","React","useState","selectedList","setSelectedList","console","log","renderRow","letterGroup","styles","row","board","map","GameTile","props","selected","setSelected","word","tile","backgroundColor","text","undefined","toUpperCase"],"mappings":"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","sourcesContent":["/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow strict-local\n */\n\nimport * as React from 'react';\nimport {View, Text} from 'react-native';\nimport styles from './gameBoardStyle';\nimport Word from '../word/Word';\n\nconst letters = [\n  [new Word('H', 69), new Word('e', 69), new Word('j', 69)],\n  [new Word('c', 420), new Word('a', 420), new Word('t', 420)],\n  [new Word('t', 96), new Word('j', 96), new Word('a', 96)],\n];\n\nexport default function GameBoard() {\n  let [selectedList, setSelectedList] = React.useState([]);\n  console.log(\"helllo\");\n  function renderRow(letterGroup, selectedList, setSelectedList) {\n    return (\n      <View style={styles.row}>\n        <GameTile\n          letters={letterGroup[0]}\n          selectedList={selectedList}\n          setSelectedList={setSelectedList}\n        />\n        <GameTile\n          letters={letterGroup[1]}\n          selectedList={selectedList}\n          setSelectedList={setSelectedList}\n        />\n        <GameTile\n          letters={letterGroup[2]}\n          selectedList={selectedList}\n          setSelectedList={setSelectedList}\n        />\n      </View>\n    );\n  }\n  return (\n    <View style={styles.board}>\n      {letters.map((letterGroup) =>\n        renderRow(letterGroup, selectedList, setSelectedList),\n      )}\n    </View>\n  );\n}\n\nexport function GameTile(props) {\n  let [selected, setSelected] = React.useState(false);\n  return (\n    <View\n      onStartShouldSetResponder={() => {\n        setSelected(!selected);\n        props.setSelectedList([...props.selectedList, props.letters.word]);\n      }}\n      style={[\n        styles.tile,\n        {backgroundColor: !selected ? 'white' : 'lightblue'},\n      ]}>\n      <Text style={styles.text}>\n        {props.letters === undefined ? '' : props.letters.word.toUpperCase()}\n      </Text>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}